//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var RolesResources = newRolesResourcesTable("newtendex", "roles_resources", "")

type rolesResourcesTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	RoleID     mysql.ColumnInteger
	ResourceID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type RolesResourcesTable struct {
	rolesResourcesTable

	NEW rolesResourcesTable
}

// AS creates new RolesResourcesTable with assigned alias
func (a RolesResourcesTable) AS(alias string) *RolesResourcesTable {
	return newRolesResourcesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RolesResourcesTable with assigned schema name
func (a RolesResourcesTable) FromSchema(schemaName string) *RolesResourcesTable {
	return newRolesResourcesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RolesResourcesTable with assigned table prefix
func (a RolesResourcesTable) WithPrefix(prefix string) *RolesResourcesTable {
	return newRolesResourcesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RolesResourcesTable with assigned table suffix
func (a RolesResourcesTable) WithSuffix(suffix string) *RolesResourcesTable {
	return newRolesResourcesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRolesResourcesTable(schemaName, tableName, alias string) *RolesResourcesTable {
	return &RolesResourcesTable{
		rolesResourcesTable: newRolesResourcesTableImpl(schemaName, tableName, alias),
		NEW:                 newRolesResourcesTableImpl("", "new", ""),
	}
}

func newRolesResourcesTableImpl(schemaName, tableName, alias string) rolesResourcesTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		RoleIDColumn     = mysql.IntegerColumn("role_id")
		ResourceIDColumn = mysql.IntegerColumn("resource_id")
		allColumns       = mysql.ColumnList{IDColumn, RoleIDColumn, ResourceIDColumn}
		mutableColumns   = mysql.ColumnList{RoleIDColumn, ResourceIDColumn}
	)

	return rolesResourcesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		RoleID:     RoleIDColumn,
		ResourceID: ResourceIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
