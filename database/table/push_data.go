//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PushData = newPushDataTable("newtendex", "push_data", "")

type pushDataTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	Type      mysql.ColumnInteger
	Data      mysql.ColumnString
	DateAdd   mysql.ColumnTimestamp
	AuctionID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type PushDataTable struct {
	pushDataTable

	NEW pushDataTable
}

// AS creates new PushDataTable with assigned alias
func (a PushDataTable) AS(alias string) *PushDataTable {
	return newPushDataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PushDataTable with assigned schema name
func (a PushDataTable) FromSchema(schemaName string) *PushDataTable {
	return newPushDataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PushDataTable with assigned table prefix
func (a PushDataTable) WithPrefix(prefix string) *PushDataTable {
	return newPushDataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PushDataTable with assigned table suffix
func (a PushDataTable) WithSuffix(suffix string) *PushDataTable {
	return newPushDataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPushDataTable(schemaName, tableName, alias string) *PushDataTable {
	return &PushDataTable{
		pushDataTable: newPushDataTableImpl(schemaName, tableName, alias),
		NEW:           newPushDataTableImpl("", "new", ""),
	}
}

func newPushDataTableImpl(schemaName, tableName, alias string) pushDataTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		TypeColumn      = mysql.IntegerColumn("type")
		DataColumn      = mysql.StringColumn("data")
		DateAddColumn   = mysql.TimestampColumn("date_add")
		AuctionIDColumn = mysql.IntegerColumn("auction_id")
		allColumns      = mysql.ColumnList{IDColumn, TypeColumn, DataColumn, DateAddColumn, AuctionIDColumn}
		mutableColumns  = mysql.ColumnList{TypeColumn, DataColumn, DateAddColumn, AuctionIDColumn}
	)

	return pushDataTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Type:      TypeColumn,
		Data:      DataColumn,
		DateAdd:   DateAddColumn,
		AuctionID: AuctionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
