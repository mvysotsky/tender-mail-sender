//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Categories = newCategoriesTable("newtendex", "categories", "")

type categoriesTable struct {
	mysql.Table

	// Columns
	ID              mysql.ColumnInteger
	SubserviceID    mysql.ColumnInteger
	ParentID        mysql.ColumnInteger
	Name            mysql.ColumnString
	Description     mysql.ColumnString
	Level           mysql.ColumnInteger
	Position        mysql.ColumnInteger
	Code            mysql.ColumnString
	IsViewPreOffers mysql.ColumnInteger
	IsViewOffers    mysql.ColumnInteger
	UserAdd         mysql.ColumnInteger
	UserEdit        mysql.ColumnInteger
	DateAdd         mysql.ColumnTimestamp
	DateEdit        mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type CategoriesTable struct {
	categoriesTable

	NEW categoriesTable
}

// AS creates new CategoriesTable with assigned alias
func (a CategoriesTable) AS(alias string) *CategoriesTable {
	return newCategoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CategoriesTable with assigned schema name
func (a CategoriesTable) FromSchema(schemaName string) *CategoriesTable {
	return newCategoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CategoriesTable with assigned table prefix
func (a CategoriesTable) WithPrefix(prefix string) *CategoriesTable {
	return newCategoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CategoriesTable with assigned table suffix
func (a CategoriesTable) WithSuffix(suffix string) *CategoriesTable {
	return newCategoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCategoriesTable(schemaName, tableName, alias string) *CategoriesTable {
	return &CategoriesTable{
		categoriesTable: newCategoriesTableImpl(schemaName, tableName, alias),
		NEW:             newCategoriesTableImpl("", "new", ""),
	}
}

func newCategoriesTableImpl(schemaName, tableName, alias string) categoriesTable {
	var (
		IDColumn              = mysql.IntegerColumn("id")
		SubserviceIDColumn    = mysql.IntegerColumn("subservice_id")
		ParentIDColumn        = mysql.IntegerColumn("parent_id")
		NameColumn            = mysql.StringColumn("name")
		DescriptionColumn     = mysql.StringColumn("description")
		LevelColumn           = mysql.IntegerColumn("level")
		PositionColumn        = mysql.IntegerColumn("position")
		CodeColumn            = mysql.StringColumn("code")
		IsViewPreOffersColumn = mysql.IntegerColumn("is_view_pre_offers")
		IsViewOffersColumn    = mysql.IntegerColumn("is_view_offers")
		UserAddColumn         = mysql.IntegerColumn("user_add")
		UserEditColumn        = mysql.IntegerColumn("user_edit")
		DateAddColumn         = mysql.TimestampColumn("date_add")
		DateEditColumn        = mysql.TimestampColumn("date_edit")
		allColumns            = mysql.ColumnList{IDColumn, SubserviceIDColumn, ParentIDColumn, NameColumn, DescriptionColumn, LevelColumn, PositionColumn, CodeColumn, IsViewPreOffersColumn, IsViewOffersColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
		mutableColumns        = mysql.ColumnList{SubserviceIDColumn, ParentIDColumn, NameColumn, DescriptionColumn, LevelColumn, PositionColumn, CodeColumn, IsViewPreOffersColumn, IsViewOffersColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
	)

	return categoriesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		SubserviceID:    SubserviceIDColumn,
		ParentID:        ParentIDColumn,
		Name:            NameColumn,
		Description:     DescriptionColumn,
		Level:           LevelColumn,
		Position:        PositionColumn,
		Code:            CodeColumn,
		IsViewPreOffers: IsViewPreOffersColumn,
		IsViewOffers:    IsViewOffersColumn,
		UserAdd:         UserAddColumn,
		UserEdit:        UserEditColumn,
		DateAdd:         DateAddColumn,
		DateEdit:        DateEditColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
