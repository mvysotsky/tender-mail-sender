//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Faq = newFaqTable("newtendex", "faq", "")

type faqTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnInteger
	Answer   mysql.ColumnString
	Type     mysql.ColumnString
	Question mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type FaqTable struct {
	faqTable

	NEW faqTable
}

// AS creates new FaqTable with assigned alias
func (a FaqTable) AS(alias string) *FaqTable {
	return newFaqTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FaqTable with assigned schema name
func (a FaqTable) FromSchema(schemaName string) *FaqTable {
	return newFaqTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FaqTable with assigned table prefix
func (a FaqTable) WithPrefix(prefix string) *FaqTable {
	return newFaqTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FaqTable with assigned table suffix
func (a FaqTable) WithSuffix(suffix string) *FaqTable {
	return newFaqTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFaqTable(schemaName, tableName, alias string) *FaqTable {
	return &FaqTable{
		faqTable: newFaqTableImpl(schemaName, tableName, alias),
		NEW:      newFaqTableImpl("", "new", ""),
	}
}

func newFaqTableImpl(schemaName, tableName, alias string) faqTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		AnswerColumn   = mysql.StringColumn("answer")
		TypeColumn     = mysql.StringColumn("type")
		QuestionColumn = mysql.StringColumn("question")
		allColumns     = mysql.ColumnList{IDColumn, AnswerColumn, TypeColumn, QuestionColumn}
		mutableColumns = mysql.ColumnList{AnswerColumn, TypeColumn, QuestionColumn}
	)

	return faqTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Answer:   AnswerColumn,
		Type:     TypeColumn,
		Question: QuestionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
