//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Templates = newTemplatesTable("newtendex", "templates", "")

type templatesTable struct {
	mysql.Table

	// Columns
	ID            mysql.ColumnInteger
	SubserviceID  mysql.ColumnInteger
	AliasID       mysql.ColumnString
	Name          mysql.ColumnString
	Template      mysql.ColumnString
	Vars          mysql.ColumnString
	EmailSubject  mysql.ColumnString
	EmailTemplate mysql.ColumnString
	UserEdit      mysql.ColumnInteger
	DateEdit      mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TemplatesTable struct {
	templatesTable

	NEW templatesTable
}

// AS creates new TemplatesTable with assigned alias
func (a TemplatesTable) AS(alias string) *TemplatesTable {
	return newTemplatesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TemplatesTable with assigned schema name
func (a TemplatesTable) FromSchema(schemaName string) *TemplatesTable {
	return newTemplatesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TemplatesTable with assigned table prefix
func (a TemplatesTable) WithPrefix(prefix string) *TemplatesTable {
	return newTemplatesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TemplatesTable with assigned table suffix
func (a TemplatesTable) WithSuffix(suffix string) *TemplatesTable {
	return newTemplatesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTemplatesTable(schemaName, tableName, alias string) *TemplatesTable {
	return &TemplatesTable{
		templatesTable: newTemplatesTableImpl(schemaName, tableName, alias),
		NEW:            newTemplatesTableImpl("", "new", ""),
	}
}

func newTemplatesTableImpl(schemaName, tableName, alias string) templatesTable {
	var (
		IDColumn            = mysql.IntegerColumn("id")
		SubserviceIDColumn  = mysql.IntegerColumn("subservice_id")
		AliasIDColumn       = mysql.StringColumn("alias_id")
		NameColumn          = mysql.StringColumn("name")
		TemplateColumn      = mysql.StringColumn("template")
		VarsColumn          = mysql.StringColumn("vars")
		EmailSubjectColumn  = mysql.StringColumn("email_subject")
		EmailTemplateColumn = mysql.StringColumn("email_template")
		UserEditColumn      = mysql.IntegerColumn("user_edit")
		DateEditColumn      = mysql.TimestampColumn("date_edit")
		allColumns          = mysql.ColumnList{IDColumn, SubserviceIDColumn, AliasIDColumn, NameColumn, TemplateColumn, VarsColumn, EmailSubjectColumn, EmailTemplateColumn, UserEditColumn, DateEditColumn}
		mutableColumns      = mysql.ColumnList{SubserviceIDColumn, AliasIDColumn, NameColumn, TemplateColumn, VarsColumn, EmailSubjectColumn, EmailTemplateColumn, UserEditColumn, DateEditColumn}
	)

	return templatesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		SubserviceID:  SubserviceIDColumn,
		AliasID:       AliasIDColumn,
		Name:          NameColumn,
		Template:      TemplateColumn,
		Vars:          VarsColumn,
		EmailSubject:  EmailSubjectColumn,
		EmailTemplate: EmailTemplateColumn,
		UserEdit:      UserEditColumn,
		DateEdit:      DateEditColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
