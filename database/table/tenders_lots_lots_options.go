//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TendersLotsLotsOptions = newTendersLotsLotsOptionsTable("newtendex", "tenders_lots_lots_options", "")

type tendersLotsLotsOptionsTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnInteger
	TenderLotID      mysql.ColumnInteger
	LotOptionID      mysql.ColumnInteger
	LotOptionValueID mysql.ColumnInteger
	Enabled          mysql.ColumnInteger // 0 - Off, 1 -On

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TendersLotsLotsOptionsTable struct {
	tendersLotsLotsOptionsTable

	NEW tendersLotsLotsOptionsTable
}

// AS creates new TendersLotsLotsOptionsTable with assigned alias
func (a TendersLotsLotsOptionsTable) AS(alias string) *TendersLotsLotsOptionsTable {
	return newTendersLotsLotsOptionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TendersLotsLotsOptionsTable with assigned schema name
func (a TendersLotsLotsOptionsTable) FromSchema(schemaName string) *TendersLotsLotsOptionsTable {
	return newTendersLotsLotsOptionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TendersLotsLotsOptionsTable with assigned table prefix
func (a TendersLotsLotsOptionsTable) WithPrefix(prefix string) *TendersLotsLotsOptionsTable {
	return newTendersLotsLotsOptionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TendersLotsLotsOptionsTable with assigned table suffix
func (a TendersLotsLotsOptionsTable) WithSuffix(suffix string) *TendersLotsLotsOptionsTable {
	return newTendersLotsLotsOptionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTendersLotsLotsOptionsTable(schemaName, tableName, alias string) *TendersLotsLotsOptionsTable {
	return &TendersLotsLotsOptionsTable{
		tendersLotsLotsOptionsTable: newTendersLotsLotsOptionsTableImpl(schemaName, tableName, alias),
		NEW:                         newTendersLotsLotsOptionsTableImpl("", "new", ""),
	}
}

func newTendersLotsLotsOptionsTableImpl(schemaName, tableName, alias string) tendersLotsLotsOptionsTable {
	var (
		IDColumn               = mysql.IntegerColumn("id")
		TenderLotIDColumn      = mysql.IntegerColumn("tender_lot_id")
		LotOptionIDColumn      = mysql.IntegerColumn("lot_option_id")
		LotOptionValueIDColumn = mysql.IntegerColumn("lot_option_value_id")
		EnabledColumn          = mysql.IntegerColumn("enabled")
		allColumns             = mysql.ColumnList{IDColumn, TenderLotIDColumn, LotOptionIDColumn, LotOptionValueIDColumn, EnabledColumn}
		mutableColumns         = mysql.ColumnList{TenderLotIDColumn, LotOptionIDColumn, LotOptionValueIDColumn, EnabledColumn}
	)

	return tendersLotsLotsOptionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		TenderLotID:      TenderLotIDColumn,
		LotOptionID:      LotOptionIDColumn,
		LotOptionValueID: LotOptionValueIDColumn,
		Enabled:          EnabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
