//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var UserData = newUserDataTable("newtendex", "user_data", "")

type userDataTable struct {
	mysql.Table

	// Columns
	ID     mysql.ColumnInteger
	Key    mysql.ColumnString
	Value  mysql.ColumnString
	UserID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UserDataTable struct {
	userDataTable

	NEW userDataTable
}

// AS creates new UserDataTable with assigned alias
func (a UserDataTable) AS(alias string) *UserDataTable {
	return newUserDataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserDataTable with assigned schema name
func (a UserDataTable) FromSchema(schemaName string) *UserDataTable {
	return newUserDataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserDataTable with assigned table prefix
func (a UserDataTable) WithPrefix(prefix string) *UserDataTable {
	return newUserDataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserDataTable with assigned table suffix
func (a UserDataTable) WithSuffix(suffix string) *UserDataTable {
	return newUserDataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserDataTable(schemaName, tableName, alias string) *UserDataTable {
	return &UserDataTable{
		userDataTable: newUserDataTableImpl(schemaName, tableName, alias),
		NEW:           newUserDataTableImpl("", "new", ""),
	}
}

func newUserDataTableImpl(schemaName, tableName, alias string) userDataTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		KeyColumn      = mysql.StringColumn("key")
		ValueColumn    = mysql.StringColumn("value")
		UserIDColumn   = mysql.IntegerColumn("user_id")
		allColumns     = mysql.ColumnList{IDColumn, KeyColumn, ValueColumn, UserIDColumn}
		mutableColumns = mysql.ColumnList{KeyColumn, ValueColumn, UserIDColumn}
	)

	return userDataTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		Key:    KeyColumn,
		Value:  ValueColumn,
		UserID: UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
