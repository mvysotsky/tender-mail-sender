//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CountriesRegionsLocalities = newCountriesRegionsLocalitiesTable("newtendex", "countries_regions_localities", "")

type countriesRegionsLocalitiesTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnInteger
	RegionID mysql.ColumnInteger
	Name     mysql.ColumnString
	Type     mysql.ColumnInteger // 1 - Город, 2 - Село, 3 - ПГТ
	UserAdd  mysql.ColumnInteger
	UserEdit mysql.ColumnInteger
	DateAdd  mysql.ColumnTimestamp
	DateEdit mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type CountriesRegionsLocalitiesTable struct {
	countriesRegionsLocalitiesTable

	NEW countriesRegionsLocalitiesTable
}

// AS creates new CountriesRegionsLocalitiesTable with assigned alias
func (a CountriesRegionsLocalitiesTable) AS(alias string) *CountriesRegionsLocalitiesTable {
	return newCountriesRegionsLocalitiesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CountriesRegionsLocalitiesTable with assigned schema name
func (a CountriesRegionsLocalitiesTable) FromSchema(schemaName string) *CountriesRegionsLocalitiesTable {
	return newCountriesRegionsLocalitiesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CountriesRegionsLocalitiesTable with assigned table prefix
func (a CountriesRegionsLocalitiesTable) WithPrefix(prefix string) *CountriesRegionsLocalitiesTable {
	return newCountriesRegionsLocalitiesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CountriesRegionsLocalitiesTable with assigned table suffix
func (a CountriesRegionsLocalitiesTable) WithSuffix(suffix string) *CountriesRegionsLocalitiesTable {
	return newCountriesRegionsLocalitiesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCountriesRegionsLocalitiesTable(schemaName, tableName, alias string) *CountriesRegionsLocalitiesTable {
	return &CountriesRegionsLocalitiesTable{
		countriesRegionsLocalitiesTable: newCountriesRegionsLocalitiesTableImpl(schemaName, tableName, alias),
		NEW:                             newCountriesRegionsLocalitiesTableImpl("", "new", ""),
	}
}

func newCountriesRegionsLocalitiesTableImpl(schemaName, tableName, alias string) countriesRegionsLocalitiesTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		RegionIDColumn = mysql.IntegerColumn("region_id")
		NameColumn     = mysql.StringColumn("name")
		TypeColumn     = mysql.IntegerColumn("type")
		UserAddColumn  = mysql.IntegerColumn("user_add")
		UserEditColumn = mysql.IntegerColumn("user_edit")
		DateAddColumn  = mysql.TimestampColumn("date_add")
		DateEditColumn = mysql.TimestampColumn("date_edit")
		allColumns     = mysql.ColumnList{IDColumn, RegionIDColumn, NameColumn, TypeColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
		mutableColumns = mysql.ColumnList{RegionIDColumn, NameColumn, TypeColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
	)

	return countriesRegionsLocalitiesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		RegionID: RegionIDColumn,
		Name:     NameColumn,
		Type:     TypeColumn,
		UserAdd:  UserAddColumn,
		UserEdit: UserEditColumn,
		DateAdd:  DateAddColumn,
		DateEdit: DateEditColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
