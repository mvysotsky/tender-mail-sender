//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DocumentsTypes = newDocumentsTypesTable("newtendex", "documents_types", "")

type documentsTypesTable struct {
	mysql.Table

	// Columns
	ID                mysql.ColumnInteger
	SubserviceID      mysql.ColumnInteger
	Name              mysql.ColumnString
	AllowedExtensions mysql.ColumnString
	IsVersioning      mysql.ColumnInteger // 1 - Yes, 0 - No
	Description       mysql.ColumnString
	Enabled           mysql.ColumnInteger // 1 - On, 0 - Off
	UserAdd           mysql.ColumnInteger
	UserEdit          mysql.ColumnInteger
	DateAdd           mysql.ColumnTimestamp
	DateEdit          mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type DocumentsTypesTable struct {
	documentsTypesTable

	NEW documentsTypesTable
}

// AS creates new DocumentsTypesTable with assigned alias
func (a DocumentsTypesTable) AS(alias string) *DocumentsTypesTable {
	return newDocumentsTypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DocumentsTypesTable with assigned schema name
func (a DocumentsTypesTable) FromSchema(schemaName string) *DocumentsTypesTable {
	return newDocumentsTypesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DocumentsTypesTable with assigned table prefix
func (a DocumentsTypesTable) WithPrefix(prefix string) *DocumentsTypesTable {
	return newDocumentsTypesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DocumentsTypesTable with assigned table suffix
func (a DocumentsTypesTable) WithSuffix(suffix string) *DocumentsTypesTable {
	return newDocumentsTypesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDocumentsTypesTable(schemaName, tableName, alias string) *DocumentsTypesTable {
	return &DocumentsTypesTable{
		documentsTypesTable: newDocumentsTypesTableImpl(schemaName, tableName, alias),
		NEW:                 newDocumentsTypesTableImpl("", "new", ""),
	}
}

func newDocumentsTypesTableImpl(schemaName, tableName, alias string) documentsTypesTable {
	var (
		IDColumn                = mysql.IntegerColumn("id")
		SubserviceIDColumn      = mysql.IntegerColumn("subservice_id")
		NameColumn              = mysql.StringColumn("name")
		AllowedExtensionsColumn = mysql.StringColumn("allowed_extensions")
		IsVersioningColumn      = mysql.IntegerColumn("is_versioning")
		DescriptionColumn       = mysql.StringColumn("description")
		EnabledColumn           = mysql.IntegerColumn("enabled")
		UserAddColumn           = mysql.IntegerColumn("user_add")
		UserEditColumn          = mysql.IntegerColumn("user_edit")
		DateAddColumn           = mysql.TimestampColumn("date_add")
		DateEditColumn          = mysql.TimestampColumn("date_edit")
		allColumns              = mysql.ColumnList{IDColumn, SubserviceIDColumn, NameColumn, AllowedExtensionsColumn, IsVersioningColumn, DescriptionColumn, EnabledColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
		mutableColumns          = mysql.ColumnList{SubserviceIDColumn, NameColumn, AllowedExtensionsColumn, IsVersioningColumn, DescriptionColumn, EnabledColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
	)

	return documentsTypesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		SubserviceID:      SubserviceIDColumn,
		Name:              NameColumn,
		AllowedExtensions: AllowedExtensionsColumn,
		IsVersioning:      IsVersioningColumn,
		Description:       DescriptionColumn,
		Enabled:           EnabledColumn,
		UserAdd:           UserAddColumn,
		UserEdit:          UserEditColumn,
		DateAdd:           DateAddColumn,
		DateEdit:          DateEditColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
