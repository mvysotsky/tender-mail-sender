//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CategoriesUsersRights = newCategoriesUsersRightsTable("newtendex", "categories_users_rights", "")

type categoriesUsersRightsTable struct {
	mysql.Table

	// Columns
	ID            mysql.ColumnInteger
	CategoryID    mysql.ColumnInteger
	UserID        mysql.ColumnInteger
	AccountID     mysql.ColumnInteger
	SuspendUntil  mysql.ColumnTimestamp
	Status        mysql.ColumnInteger // 0 - Новая,1 - Принята, 2 - Отклонена, 3 - Обновлена
	ExternalCause mysql.ColumnString
	InternalCause mysql.ColumnString
	UserAdd       mysql.ColumnInteger
	UserEdit      mysql.ColumnInteger
	DateAdd       mysql.ColumnTimestamp
	DateEdit      mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type CategoriesUsersRightsTable struct {
	categoriesUsersRightsTable

	NEW categoriesUsersRightsTable
}

// AS creates new CategoriesUsersRightsTable with assigned alias
func (a CategoriesUsersRightsTable) AS(alias string) *CategoriesUsersRightsTable {
	return newCategoriesUsersRightsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CategoriesUsersRightsTable with assigned schema name
func (a CategoriesUsersRightsTable) FromSchema(schemaName string) *CategoriesUsersRightsTable {
	return newCategoriesUsersRightsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CategoriesUsersRightsTable with assigned table prefix
func (a CategoriesUsersRightsTable) WithPrefix(prefix string) *CategoriesUsersRightsTable {
	return newCategoriesUsersRightsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CategoriesUsersRightsTable with assigned table suffix
func (a CategoriesUsersRightsTable) WithSuffix(suffix string) *CategoriesUsersRightsTable {
	return newCategoriesUsersRightsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCategoriesUsersRightsTable(schemaName, tableName, alias string) *CategoriesUsersRightsTable {
	return &CategoriesUsersRightsTable{
		categoriesUsersRightsTable: newCategoriesUsersRightsTableImpl(schemaName, tableName, alias),
		NEW:                        newCategoriesUsersRightsTableImpl("", "new", ""),
	}
}

func newCategoriesUsersRightsTableImpl(schemaName, tableName, alias string) categoriesUsersRightsTable {
	var (
		IDColumn            = mysql.IntegerColumn("id")
		CategoryIDColumn    = mysql.IntegerColumn("category_id")
		UserIDColumn        = mysql.IntegerColumn("user_id")
		AccountIDColumn     = mysql.IntegerColumn("account_id")
		SuspendUntilColumn  = mysql.TimestampColumn("suspend_until")
		StatusColumn        = mysql.IntegerColumn("status")
		ExternalCauseColumn = mysql.StringColumn("external_cause")
		InternalCauseColumn = mysql.StringColumn("internal_cause")
		UserAddColumn       = mysql.IntegerColumn("user_add")
		UserEditColumn      = mysql.IntegerColumn("user_edit")
		DateAddColumn       = mysql.TimestampColumn("date_add")
		DateEditColumn      = mysql.TimestampColumn("date_edit")
		allColumns          = mysql.ColumnList{IDColumn, CategoryIDColumn, UserIDColumn, AccountIDColumn, SuspendUntilColumn, StatusColumn, ExternalCauseColumn, InternalCauseColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
		mutableColumns      = mysql.ColumnList{CategoryIDColumn, UserIDColumn, AccountIDColumn, SuspendUntilColumn, StatusColumn, ExternalCauseColumn, InternalCauseColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
	)

	return categoriesUsersRightsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		CategoryID:    CategoryIDColumn,
		UserID:        UserIDColumn,
		AccountID:     AccountIDColumn,
		SuspendUntil:  SuspendUntilColumn,
		Status:        StatusColumn,
		ExternalCause: ExternalCauseColumn,
		InternalCause: InternalCauseColumn,
		UserAdd:       UserAddColumn,
		UserEdit:      UserEditColumn,
		DateAdd:       DateAddColumn,
		DateEdit:      DateEditColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
