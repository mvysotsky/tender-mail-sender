//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AccountsAddresses = newAccountsAddressesTable("newtendex", "accounts_addresses", "")

type accountsAddressesTable struct {
	mysql.Table

	// Columns
	ID                mysql.ColumnInteger
	Type              mysql.ColumnInteger // 1 - Юр, 2 - Физ. 3 - Склад
	AccountID         mysql.ColumnInteger
	CountryID         mysql.ColumnInteger
	CountryRegionID   mysql.ColumnInteger
	CountryLocationID mysql.ColumnInteger
	Street            mysql.ColumnString
	House             mysql.ColumnString
	RoomApartment     mysql.ColumnString
	Address           mysql.ColumnString
	UserAdd           mysql.ColumnInteger
	UserEdit          mysql.ColumnInteger
	DateAdd           mysql.ColumnTimestamp
	DateEdit          mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AccountsAddressesTable struct {
	accountsAddressesTable

	NEW accountsAddressesTable
}

// AS creates new AccountsAddressesTable with assigned alias
func (a AccountsAddressesTable) AS(alias string) *AccountsAddressesTable {
	return newAccountsAddressesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountsAddressesTable with assigned schema name
func (a AccountsAddressesTable) FromSchema(schemaName string) *AccountsAddressesTable {
	return newAccountsAddressesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountsAddressesTable with assigned table prefix
func (a AccountsAddressesTable) WithPrefix(prefix string) *AccountsAddressesTable {
	return newAccountsAddressesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountsAddressesTable with assigned table suffix
func (a AccountsAddressesTable) WithSuffix(suffix string) *AccountsAddressesTable {
	return newAccountsAddressesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountsAddressesTable(schemaName, tableName, alias string) *AccountsAddressesTable {
	return &AccountsAddressesTable{
		accountsAddressesTable: newAccountsAddressesTableImpl(schemaName, tableName, alias),
		NEW:                    newAccountsAddressesTableImpl("", "new", ""),
	}
}

func newAccountsAddressesTableImpl(schemaName, tableName, alias string) accountsAddressesTable {
	var (
		IDColumn                = mysql.IntegerColumn("id")
		TypeColumn              = mysql.IntegerColumn("type")
		AccountIDColumn         = mysql.IntegerColumn("account_id")
		CountryIDColumn         = mysql.IntegerColumn("country_id")
		CountryRegionIDColumn   = mysql.IntegerColumn("country_region_id")
		CountryLocationIDColumn = mysql.IntegerColumn("country_location_id")
		StreetColumn            = mysql.StringColumn("street")
		HouseColumn             = mysql.StringColumn("house")
		RoomApartmentColumn     = mysql.StringColumn("room_apartment")
		AddressColumn           = mysql.StringColumn("address")
		UserAddColumn           = mysql.IntegerColumn("user_add")
		UserEditColumn          = mysql.IntegerColumn("user_edit")
		DateAddColumn           = mysql.TimestampColumn("date_add")
		DateEditColumn          = mysql.TimestampColumn("date_edit")
		allColumns              = mysql.ColumnList{IDColumn, TypeColumn, AccountIDColumn, CountryIDColumn, CountryRegionIDColumn, CountryLocationIDColumn, StreetColumn, HouseColumn, RoomApartmentColumn, AddressColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
		mutableColumns          = mysql.ColumnList{TypeColumn, AccountIDColumn, CountryIDColumn, CountryRegionIDColumn, CountryLocationIDColumn, StreetColumn, HouseColumn, RoomApartmentColumn, AddressColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
	)

	return accountsAddressesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Type:              TypeColumn,
		AccountID:         AccountIDColumn,
		CountryID:         CountryIDColumn,
		CountryRegionID:   CountryRegionIDColumn,
		CountryLocationID: CountryLocationIDColumn,
		Street:            StreetColumn,
		House:             HouseColumn,
		RoomApartment:     RoomApartmentColumn,
		Address:           AddressColumn,
		UserAdd:           UserAddColumn,
		UserEdit:          UserEditColumn,
		DateAdd:           DateAddColumn,
		DateEdit:          DateEditColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
