//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TendersLotsProducts = newTendersLotsProductsTable("newtendex", "tenders_lots_products", "")

type tendersLotsProductsTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	TenderLotID mysql.ColumnInteger
	ProductID   mysql.ColumnInteger
	Count       mysql.ColumnFloat
	Price       mysql.ColumnFloat

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TendersLotsProductsTable struct {
	tendersLotsProductsTable

	NEW tendersLotsProductsTable
}

// AS creates new TendersLotsProductsTable with assigned alias
func (a TendersLotsProductsTable) AS(alias string) *TendersLotsProductsTable {
	return newTendersLotsProductsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TendersLotsProductsTable with assigned schema name
func (a TendersLotsProductsTable) FromSchema(schemaName string) *TendersLotsProductsTable {
	return newTendersLotsProductsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TendersLotsProductsTable with assigned table prefix
func (a TendersLotsProductsTable) WithPrefix(prefix string) *TendersLotsProductsTable {
	return newTendersLotsProductsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TendersLotsProductsTable with assigned table suffix
func (a TendersLotsProductsTable) WithSuffix(suffix string) *TendersLotsProductsTable {
	return newTendersLotsProductsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTendersLotsProductsTable(schemaName, tableName, alias string) *TendersLotsProductsTable {
	return &TendersLotsProductsTable{
		tendersLotsProductsTable: newTendersLotsProductsTableImpl(schemaName, tableName, alias),
		NEW:                      newTendersLotsProductsTableImpl("", "new", ""),
	}
}

func newTendersLotsProductsTableImpl(schemaName, tableName, alias string) tendersLotsProductsTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		TenderLotIDColumn = mysql.IntegerColumn("tender_lot_id")
		ProductIDColumn   = mysql.IntegerColumn("product_id")
		CountColumn       = mysql.FloatColumn("count")
		PriceColumn       = mysql.FloatColumn("price")
		allColumns        = mysql.ColumnList{IDColumn, TenderLotIDColumn, ProductIDColumn, CountColumn, PriceColumn}
		mutableColumns    = mysql.ColumnList{TenderLotIDColumn, ProductIDColumn, CountColumn, PriceColumn}
	)

	return tendersLotsProductsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		TenderLotID: TenderLotIDColumn,
		ProductID:   ProductIDColumn,
		Count:       CountColumn,
		Price:       PriceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
