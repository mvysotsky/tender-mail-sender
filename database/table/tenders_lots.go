//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TendersLots = newTendersLotsTable("newtendex", "tenders_lots", "")

type tendersLotsTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	TenderID   mysql.ColumnInteger
	CategoryID mysql.ColumnInteger
	UnitID     mysql.ColumnInteger
	Name       mysql.ColumnString
	Count      mysql.ColumnFloat
	SortOrder  mysql.ColumnInteger
	StartPrice mysql.ColumnFloat
	Step       mysql.ColumnFloat
	IsTemplate mysql.ColumnInteger // 0 - не шаблон, 1 - шаблон
	Formula    mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TendersLotsTable struct {
	tendersLotsTable

	NEW tendersLotsTable
}

// AS creates new TendersLotsTable with assigned alias
func (a TendersLotsTable) AS(alias string) *TendersLotsTable {
	return newTendersLotsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TendersLotsTable with assigned schema name
func (a TendersLotsTable) FromSchema(schemaName string) *TendersLotsTable {
	return newTendersLotsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TendersLotsTable with assigned table prefix
func (a TendersLotsTable) WithPrefix(prefix string) *TendersLotsTable {
	return newTendersLotsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TendersLotsTable with assigned table suffix
func (a TendersLotsTable) WithSuffix(suffix string) *TendersLotsTable {
	return newTendersLotsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTendersLotsTable(schemaName, tableName, alias string) *TendersLotsTable {
	return &TendersLotsTable{
		tendersLotsTable: newTendersLotsTableImpl(schemaName, tableName, alias),
		NEW:              newTendersLotsTableImpl("", "new", ""),
	}
}

func newTendersLotsTableImpl(schemaName, tableName, alias string) tendersLotsTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		TenderIDColumn   = mysql.IntegerColumn("tender_id")
		CategoryIDColumn = mysql.IntegerColumn("category_id")
		UnitIDColumn     = mysql.IntegerColumn("unit_id")
		NameColumn       = mysql.StringColumn("name")
		CountColumn      = mysql.FloatColumn("count")
		SortOrderColumn  = mysql.IntegerColumn("sort_order")
		StartPriceColumn = mysql.FloatColumn("start_price")
		StepColumn       = mysql.FloatColumn("step")
		IsTemplateColumn = mysql.IntegerColumn("is_template")
		FormulaColumn    = mysql.StringColumn("formula")
		allColumns       = mysql.ColumnList{IDColumn, TenderIDColumn, CategoryIDColumn, UnitIDColumn, NameColumn, CountColumn, SortOrderColumn, StartPriceColumn, StepColumn, IsTemplateColumn, FormulaColumn}
		mutableColumns   = mysql.ColumnList{TenderIDColumn, CategoryIDColumn, UnitIDColumn, NameColumn, CountColumn, SortOrderColumn, StartPriceColumn, StepColumn, IsTemplateColumn, FormulaColumn}
	)

	return tendersLotsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		TenderID:   TenderIDColumn,
		CategoryID: CategoryIDColumn,
		UnitID:     UnitIDColumn,
		Name:       NameColumn,
		Count:      CountColumn,
		SortOrder:  SortOrderColumn,
		StartPrice: StartPriceColumn,
		Step:       StepColumn,
		IsTemplate: IsTemplateColumn,
		Formula:    FormulaColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
