//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TendersRequestsAndInvites = newTendersRequestsAndInvitesTable("newtendex", "tenders_requests_and_invites", "")

type tendersRequestsAndInvitesTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	TenderID    mysql.ColumnInteger
	AccountName mysql.ColumnString
	DateAdd     mysql.ColumnTimestamp
	Comment     mysql.ColumnString
	Status      mysql.ColumnInteger
	AccountID   mysql.ColumnInteger
	Type        mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TendersRequestsAndInvitesTable struct {
	tendersRequestsAndInvitesTable

	NEW tendersRequestsAndInvitesTable
}

// AS creates new TendersRequestsAndInvitesTable with assigned alias
func (a TendersRequestsAndInvitesTable) AS(alias string) *TendersRequestsAndInvitesTable {
	return newTendersRequestsAndInvitesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TendersRequestsAndInvitesTable with assigned schema name
func (a TendersRequestsAndInvitesTable) FromSchema(schemaName string) *TendersRequestsAndInvitesTable {
	return newTendersRequestsAndInvitesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TendersRequestsAndInvitesTable with assigned table prefix
func (a TendersRequestsAndInvitesTable) WithPrefix(prefix string) *TendersRequestsAndInvitesTable {
	return newTendersRequestsAndInvitesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TendersRequestsAndInvitesTable with assigned table suffix
func (a TendersRequestsAndInvitesTable) WithSuffix(suffix string) *TendersRequestsAndInvitesTable {
	return newTendersRequestsAndInvitesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTendersRequestsAndInvitesTable(schemaName, tableName, alias string) *TendersRequestsAndInvitesTable {
	return &TendersRequestsAndInvitesTable{
		tendersRequestsAndInvitesTable: newTendersRequestsAndInvitesTableImpl(schemaName, tableName, alias),
		NEW:                            newTendersRequestsAndInvitesTableImpl("", "new", ""),
	}
}

func newTendersRequestsAndInvitesTableImpl(schemaName, tableName, alias string) tendersRequestsAndInvitesTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		TenderIDColumn    = mysql.IntegerColumn("tender_id")
		AccountNameColumn = mysql.StringColumn("account_name")
		DateAddColumn     = mysql.TimestampColumn("date_add")
		CommentColumn     = mysql.StringColumn("comment")
		StatusColumn      = mysql.IntegerColumn("status")
		AccountIDColumn   = mysql.IntegerColumn("account_id")
		TypeColumn        = mysql.IntegerColumn("type")
		allColumns        = mysql.ColumnList{IDColumn, TenderIDColumn, AccountNameColumn, DateAddColumn, CommentColumn, StatusColumn, AccountIDColumn, TypeColumn}
		mutableColumns    = mysql.ColumnList{IDColumn, TenderIDColumn, AccountNameColumn, DateAddColumn, CommentColumn, StatusColumn, AccountIDColumn, TypeColumn}
	)

	return tendersRequestsAndInvitesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		TenderID:    TenderIDColumn,
		AccountName: AccountNameColumn,
		DateAdd:     DateAddColumn,
		Comment:     CommentColumn,
		Status:      StatusColumn,
		AccountID:   AccountIDColumn,
		Type:        TypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
