//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AccountsContacts = newAccountsContactsTable("newtendex", "accounts_contacts", "")

type accountsContactsTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	AccountID  mysql.ColumnInteger
	Name       mysql.ColumnString
	Position   mysql.ColumnString
	Phone      mysql.ColumnString
	Email      mysql.ColumnString
	IsRequired mysql.ColumnInteger
	UserAdd    mysql.ColumnInteger
	UserEdit   mysql.ColumnInteger
	DateAdd    mysql.ColumnTimestamp
	DateEdit   mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AccountsContactsTable struct {
	accountsContactsTable

	NEW accountsContactsTable
}

// AS creates new AccountsContactsTable with assigned alias
func (a AccountsContactsTable) AS(alias string) *AccountsContactsTable {
	return newAccountsContactsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountsContactsTable with assigned schema name
func (a AccountsContactsTable) FromSchema(schemaName string) *AccountsContactsTable {
	return newAccountsContactsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountsContactsTable with assigned table prefix
func (a AccountsContactsTable) WithPrefix(prefix string) *AccountsContactsTable {
	return newAccountsContactsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountsContactsTable with assigned table suffix
func (a AccountsContactsTable) WithSuffix(suffix string) *AccountsContactsTable {
	return newAccountsContactsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountsContactsTable(schemaName, tableName, alias string) *AccountsContactsTable {
	return &AccountsContactsTable{
		accountsContactsTable: newAccountsContactsTableImpl(schemaName, tableName, alias),
		NEW:                   newAccountsContactsTableImpl("", "new", ""),
	}
}

func newAccountsContactsTableImpl(schemaName, tableName, alias string) accountsContactsTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		AccountIDColumn  = mysql.IntegerColumn("account_id")
		NameColumn       = mysql.StringColumn("name")
		PositionColumn   = mysql.StringColumn("position")
		PhoneColumn      = mysql.StringColumn("phone")
		EmailColumn      = mysql.StringColumn("email")
		IsRequiredColumn = mysql.IntegerColumn("is_required")
		UserAddColumn    = mysql.IntegerColumn("user_add")
		UserEditColumn   = mysql.IntegerColumn("user_edit")
		DateAddColumn    = mysql.TimestampColumn("date_add")
		DateEditColumn   = mysql.TimestampColumn("date_edit")
		allColumns       = mysql.ColumnList{IDColumn, AccountIDColumn, NameColumn, PositionColumn, PhoneColumn, EmailColumn, IsRequiredColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
		mutableColumns   = mysql.ColumnList{AccountIDColumn, NameColumn, PositionColumn, PhoneColumn, EmailColumn, IsRequiredColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
	)

	return accountsContactsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		AccountID:  AccountIDColumn,
		Name:       NameColumn,
		Position:   PositionColumn,
		Phone:      PhoneColumn,
		Email:      EmailColumn,
		IsRequired: IsRequiredColumn,
		UserAdd:    UserAddColumn,
		UserEdit:   UserEditColumn,
		DateAdd:    DateAddColumn,
		DateEdit:   DateEditColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
