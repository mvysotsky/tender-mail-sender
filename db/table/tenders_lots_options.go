//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TendersLotsOptions = newTendersLotsOptionsTable("newtendex", "tenders_lots_options", "")

type tendersLotsOptionsTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnInteger
	TenderID       mysql.ColumnInteger
	LotOptionID    mysql.ColumnInteger
	LotOptionValue mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TendersLotsOptionsTable struct {
	tendersLotsOptionsTable

	NEW tendersLotsOptionsTable
}

// AS creates new TendersLotsOptionsTable with assigned alias
func (a TendersLotsOptionsTable) AS(alias string) *TendersLotsOptionsTable {
	return newTendersLotsOptionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TendersLotsOptionsTable with assigned schema name
func (a TendersLotsOptionsTable) FromSchema(schemaName string) *TendersLotsOptionsTable {
	return newTendersLotsOptionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TendersLotsOptionsTable with assigned table prefix
func (a TendersLotsOptionsTable) WithPrefix(prefix string) *TendersLotsOptionsTable {
	return newTendersLotsOptionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TendersLotsOptionsTable with assigned table suffix
func (a TendersLotsOptionsTable) WithSuffix(suffix string) *TendersLotsOptionsTable {
	return newTendersLotsOptionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTendersLotsOptionsTable(schemaName, tableName, alias string) *TendersLotsOptionsTable {
	return &TendersLotsOptionsTable{
		tendersLotsOptionsTable: newTendersLotsOptionsTableImpl(schemaName, tableName, alias),
		NEW:                     newTendersLotsOptionsTableImpl("", "new", ""),
	}
}

func newTendersLotsOptionsTableImpl(schemaName, tableName, alias string) tendersLotsOptionsTable {
	var (
		IDColumn             = mysql.IntegerColumn("id")
		TenderIDColumn       = mysql.IntegerColumn("tender_id")
		LotOptionIDColumn    = mysql.IntegerColumn("lot_option_id")
		LotOptionValueColumn = mysql.IntegerColumn("lot_option_value")
		allColumns           = mysql.ColumnList{IDColumn, TenderIDColumn, LotOptionIDColumn, LotOptionValueColumn}
		mutableColumns       = mysql.ColumnList{TenderIDColumn, LotOptionIDColumn, LotOptionValueColumn}
	)

	return tendersLotsOptionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		TenderID:       TenderIDColumn,
		LotOptionID:    LotOptionIDColumn,
		LotOptionValue: LotOptionValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
