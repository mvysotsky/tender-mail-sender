//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AccountsData = newAccountsDataTable("newtendex", "accounts_data", "")

type accountsDataTable struct {
	mysql.Table

	// Columns
	ID                 mysql.ColumnInteger
	AccountID          mysql.ColumnInteger
	AccountDataFieldID mysql.ColumnInteger
	Value              mysql.ColumnString
	UserAdd            mysql.ColumnInteger
	UserEdit           mysql.ColumnInteger
	DateAdd            mysql.ColumnTimestamp
	DateEdit           mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AccountsDataTable struct {
	accountsDataTable

	NEW accountsDataTable
}

// AS creates new AccountsDataTable with assigned alias
func (a AccountsDataTable) AS(alias string) *AccountsDataTable {
	return newAccountsDataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountsDataTable with assigned schema name
func (a AccountsDataTable) FromSchema(schemaName string) *AccountsDataTable {
	return newAccountsDataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountsDataTable with assigned table prefix
func (a AccountsDataTable) WithPrefix(prefix string) *AccountsDataTable {
	return newAccountsDataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountsDataTable with assigned table suffix
func (a AccountsDataTable) WithSuffix(suffix string) *AccountsDataTable {
	return newAccountsDataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountsDataTable(schemaName, tableName, alias string) *AccountsDataTable {
	return &AccountsDataTable{
		accountsDataTable: newAccountsDataTableImpl(schemaName, tableName, alias),
		NEW:               newAccountsDataTableImpl("", "new", ""),
	}
}

func newAccountsDataTableImpl(schemaName, tableName, alias string) accountsDataTable {
	var (
		IDColumn                 = mysql.IntegerColumn("id")
		AccountIDColumn          = mysql.IntegerColumn("account_id")
		AccountDataFieldIDColumn = mysql.IntegerColumn("account_data_field_id")
		ValueColumn              = mysql.StringColumn("value")
		UserAddColumn            = mysql.IntegerColumn("user_add")
		UserEditColumn           = mysql.IntegerColumn("user_edit")
		DateAddColumn            = mysql.TimestampColumn("date_add")
		DateEditColumn           = mysql.TimestampColumn("date_edit")
		allColumns               = mysql.ColumnList{IDColumn, AccountIDColumn, AccountDataFieldIDColumn, ValueColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
		mutableColumns           = mysql.ColumnList{AccountIDColumn, AccountDataFieldIDColumn, ValueColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
	)

	return accountsDataTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		AccountID:          AccountIDColumn,
		AccountDataFieldID: AccountDataFieldIDColumn,
		Value:              ValueColumn,
		UserAdd:            UserAddColumn,
		UserEdit:           UserEditColumn,
		DateAdd:            DateAddColumn,
		DateEdit:           DateEditColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
