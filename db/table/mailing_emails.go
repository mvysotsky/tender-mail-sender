//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var MailingEmails = newMailingEmailsTable("newtendex", "mailing_emails", "")

type mailingEmailsTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	MailingID mysql.ColumnInteger
	Email     mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type MailingEmailsTable struct {
	mailingEmailsTable

	NEW mailingEmailsTable
}

// AS creates new MailingEmailsTable with assigned alias
func (a MailingEmailsTable) AS(alias string) *MailingEmailsTable {
	return newMailingEmailsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MailingEmailsTable with assigned schema name
func (a MailingEmailsTable) FromSchema(schemaName string) *MailingEmailsTable {
	return newMailingEmailsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MailingEmailsTable with assigned table prefix
func (a MailingEmailsTable) WithPrefix(prefix string) *MailingEmailsTable {
	return newMailingEmailsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MailingEmailsTable with assigned table suffix
func (a MailingEmailsTable) WithSuffix(suffix string) *MailingEmailsTable {
	return newMailingEmailsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMailingEmailsTable(schemaName, tableName, alias string) *MailingEmailsTable {
	return &MailingEmailsTable{
		mailingEmailsTable: newMailingEmailsTableImpl(schemaName, tableName, alias),
		NEW:                newMailingEmailsTableImpl("", "new", ""),
	}
}

func newMailingEmailsTableImpl(schemaName, tableName, alias string) mailingEmailsTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		MailingIDColumn = mysql.IntegerColumn("mailing_id")
		EmailColumn     = mysql.StringColumn("email")
		allColumns      = mysql.ColumnList{IDColumn, MailingIDColumn, EmailColumn}
		mutableColumns  = mysql.ColumnList{MailingIDColumn, EmailColumn}
	)

	return mailingEmailsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		MailingID: MailingIDColumn,
		Email:     EmailColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
