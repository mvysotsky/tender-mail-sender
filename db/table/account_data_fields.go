//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AccountDataFields = newAccountDataFieldsTable("newtendex", "account_data_fields", "")

type accountDataFieldsTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnInteger
	SubserviceID mysql.ColumnInteger
	Name         mysql.ColumnString
	AliasCol     mysql.ColumnString
	TypeData     mysql.ColumnInteger // 1 - Текст, 2 -Только числа(int), 3 - идентификатор из таблицы accounts_addresses

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AccountDataFieldsTable struct {
	accountDataFieldsTable

	NEW accountDataFieldsTable
}

// AS creates new AccountDataFieldsTable with assigned alias
func (a AccountDataFieldsTable) AS(alias string) *AccountDataFieldsTable {
	return newAccountDataFieldsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountDataFieldsTable with assigned schema name
func (a AccountDataFieldsTable) FromSchema(schemaName string) *AccountDataFieldsTable {
	return newAccountDataFieldsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountDataFieldsTable with assigned table prefix
func (a AccountDataFieldsTable) WithPrefix(prefix string) *AccountDataFieldsTable {
	return newAccountDataFieldsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountDataFieldsTable with assigned table suffix
func (a AccountDataFieldsTable) WithSuffix(suffix string) *AccountDataFieldsTable {
	return newAccountDataFieldsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountDataFieldsTable(schemaName, tableName, alias string) *AccountDataFieldsTable {
	return &AccountDataFieldsTable{
		accountDataFieldsTable: newAccountDataFieldsTableImpl(schemaName, tableName, alias),
		NEW:                    newAccountDataFieldsTableImpl("", "new", ""),
	}
}

func newAccountDataFieldsTableImpl(schemaName, tableName, alias string) accountDataFieldsTable {
	var (
		IDColumn           = mysql.IntegerColumn("id")
		SubserviceIDColumn = mysql.IntegerColumn("subservice_id")
		NameColumn         = mysql.StringColumn("name")
		AliasColumn        = mysql.StringColumn("alias")
		TypeDataColumn     = mysql.IntegerColumn("type_data")
		allColumns         = mysql.ColumnList{IDColumn, SubserviceIDColumn, NameColumn, AliasColumn, TypeDataColumn}
		mutableColumns     = mysql.ColumnList{SubserviceIDColumn, NameColumn, AliasColumn, TypeDataColumn}
	)

	return accountDataFieldsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		SubserviceID: SubserviceIDColumn,
		Name:         NameColumn,
		AliasCol:     AliasColumn,
		TypeData:     TypeDataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
