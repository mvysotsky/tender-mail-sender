//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var LogsUsersActions = newLogsUsersActionsTable("newtendex", "logs_users_actions", "")

type logsUsersActionsTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnInteger
	UserID           mysql.ColumnInteger
	ActionType       mysql.ColumnInteger // Долго перечислять, будут тут типы те которые в ТЗ
	Essence          mysql.ColumnInteger
	ActionRelativeID mysql.ColumnInteger
	Date             mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type LogsUsersActionsTable struct {
	logsUsersActionsTable

	NEW logsUsersActionsTable
}

// AS creates new LogsUsersActionsTable with assigned alias
func (a LogsUsersActionsTable) AS(alias string) *LogsUsersActionsTable {
	return newLogsUsersActionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LogsUsersActionsTable with assigned schema name
func (a LogsUsersActionsTable) FromSchema(schemaName string) *LogsUsersActionsTable {
	return newLogsUsersActionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LogsUsersActionsTable with assigned table prefix
func (a LogsUsersActionsTable) WithPrefix(prefix string) *LogsUsersActionsTable {
	return newLogsUsersActionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LogsUsersActionsTable with assigned table suffix
func (a LogsUsersActionsTable) WithSuffix(suffix string) *LogsUsersActionsTable {
	return newLogsUsersActionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLogsUsersActionsTable(schemaName, tableName, alias string) *LogsUsersActionsTable {
	return &LogsUsersActionsTable{
		logsUsersActionsTable: newLogsUsersActionsTableImpl(schemaName, tableName, alias),
		NEW:                   newLogsUsersActionsTableImpl("", "new", ""),
	}
}

func newLogsUsersActionsTableImpl(schemaName, tableName, alias string) logsUsersActionsTable {
	var (
		IDColumn               = mysql.IntegerColumn("id")
		UserIDColumn           = mysql.IntegerColumn("user_id")
		ActionTypeColumn       = mysql.IntegerColumn("action_type")
		EssenceColumn          = mysql.IntegerColumn("essence")
		ActionRelativeIDColumn = mysql.IntegerColumn("action_relative_id")
		DateColumn             = mysql.TimestampColumn("date")
		allColumns             = mysql.ColumnList{IDColumn, UserIDColumn, ActionTypeColumn, EssenceColumn, ActionRelativeIDColumn, DateColumn}
		mutableColumns         = mysql.ColumnList{UserIDColumn, ActionTypeColumn, EssenceColumn, ActionRelativeIDColumn, DateColumn}
	)

	return logsUsersActionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		UserID:           UserIDColumn,
		ActionType:       ActionTypeColumn,
		Essence:          EssenceColumn,
		ActionRelativeID: ActionRelativeIDColumn,
		Date:             DateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
