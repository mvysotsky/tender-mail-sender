//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Documents = newDocumentsTable("newtendex", "documents", "")

type documentsTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnInteger
	DocumentTypeID mysql.ColumnInteger
	AccountID      mysql.ColumnInteger
	AliasCol       mysql.ColumnString
	Name           mysql.ColumnString
	FileName       mysql.ColumnString
	Version        mysql.ColumnInteger
	FileType       mysql.ColumnString
	UserAdd        mysql.ColumnInteger
	DateAdd        mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type DocumentsTable struct {
	documentsTable

	NEW documentsTable
}

// AS creates new DocumentsTable with assigned alias
func (a DocumentsTable) AS(alias string) *DocumentsTable {
	return newDocumentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DocumentsTable with assigned schema name
func (a DocumentsTable) FromSchema(schemaName string) *DocumentsTable {
	return newDocumentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DocumentsTable with assigned table prefix
func (a DocumentsTable) WithPrefix(prefix string) *DocumentsTable {
	return newDocumentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DocumentsTable with assigned table suffix
func (a DocumentsTable) WithSuffix(suffix string) *DocumentsTable {
	return newDocumentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDocumentsTable(schemaName, tableName, alias string) *DocumentsTable {
	return &DocumentsTable{
		documentsTable: newDocumentsTableImpl(schemaName, tableName, alias),
		NEW:            newDocumentsTableImpl("", "new", ""),
	}
}

func newDocumentsTableImpl(schemaName, tableName, alias string) documentsTable {
	var (
		IDColumn             = mysql.IntegerColumn("id")
		DocumentTypeIDColumn = mysql.IntegerColumn("document_type_id")
		AccountIDColumn      = mysql.IntegerColumn("account_id")
		AliasColumn          = mysql.StringColumn("alias")
		NameColumn           = mysql.StringColumn("name")
		FileNameColumn       = mysql.StringColumn("file_name")
		VersionColumn        = mysql.IntegerColumn("version")
		FileTypeColumn       = mysql.StringColumn("file_type")
		UserAddColumn        = mysql.IntegerColumn("user_add")
		DateAddColumn        = mysql.TimestampColumn("date_add")
		allColumns           = mysql.ColumnList{IDColumn, DocumentTypeIDColumn, AccountIDColumn, AliasColumn, NameColumn, FileNameColumn, VersionColumn, FileTypeColumn, UserAddColumn, DateAddColumn}
		mutableColumns       = mysql.ColumnList{DocumentTypeIDColumn, AccountIDColumn, AliasColumn, NameColumn, FileNameColumn, VersionColumn, FileTypeColumn, UserAddColumn, DateAddColumn}
	)

	return documentsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		DocumentTypeID: DocumentTypeIDColumn,
		AccountID:      AccountIDColumn,
		AliasCol:       AliasColumn,
		Name:           NameColumn,
		FileName:       FileNameColumn,
		Version:        VersionColumn,
		FileType:       FileTypeColumn,
		UserAdd:        UserAddColumn,
		DateAdd:        DateAddColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
