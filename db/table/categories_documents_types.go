//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CategoriesDocumentsTypes = newCategoriesDocumentsTypesTable("newtendex", "categories_documents_types", "")

type categoriesDocumentsTypesTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnInteger
	CategoryID     mysql.ColumnInteger
	DocumentTypeID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type CategoriesDocumentsTypesTable struct {
	categoriesDocumentsTypesTable

	NEW categoriesDocumentsTypesTable
}

// AS creates new CategoriesDocumentsTypesTable with assigned alias
func (a CategoriesDocumentsTypesTable) AS(alias string) *CategoriesDocumentsTypesTable {
	return newCategoriesDocumentsTypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CategoriesDocumentsTypesTable with assigned schema name
func (a CategoriesDocumentsTypesTable) FromSchema(schemaName string) *CategoriesDocumentsTypesTable {
	return newCategoriesDocumentsTypesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CategoriesDocumentsTypesTable with assigned table prefix
func (a CategoriesDocumentsTypesTable) WithPrefix(prefix string) *CategoriesDocumentsTypesTable {
	return newCategoriesDocumentsTypesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CategoriesDocumentsTypesTable with assigned table suffix
func (a CategoriesDocumentsTypesTable) WithSuffix(suffix string) *CategoriesDocumentsTypesTable {
	return newCategoriesDocumentsTypesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCategoriesDocumentsTypesTable(schemaName, tableName, alias string) *CategoriesDocumentsTypesTable {
	return &CategoriesDocumentsTypesTable{
		categoriesDocumentsTypesTable: newCategoriesDocumentsTypesTableImpl(schemaName, tableName, alias),
		NEW:                           newCategoriesDocumentsTypesTableImpl("", "new", ""),
	}
}

func newCategoriesDocumentsTypesTableImpl(schemaName, tableName, alias string) categoriesDocumentsTypesTable {
	var (
		IDColumn             = mysql.IntegerColumn("id")
		CategoryIDColumn     = mysql.IntegerColumn("category_id")
		DocumentTypeIDColumn = mysql.IntegerColumn("document_type_id")
		allColumns           = mysql.ColumnList{IDColumn, CategoryIDColumn, DocumentTypeIDColumn}
		mutableColumns       = mysql.ColumnList{CategoryIDColumn, DocumentTypeIDColumn}
	)

	return categoriesDocumentsTypesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CategoryID:     CategoryIDColumn,
		DocumentTypeID: DocumentTypeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
