//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Languages = newLanguagesTable("newtendex", "languages", "")

type languagesTable struct {
	mysql.Table

	// Columns
	ID   mysql.ColumnInteger
	Name mysql.ColumnString
	Code mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type LanguagesTable struct {
	languagesTable

	NEW languagesTable
}

// AS creates new LanguagesTable with assigned alias
func (a LanguagesTable) AS(alias string) *LanguagesTable {
	return newLanguagesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LanguagesTable with assigned schema name
func (a LanguagesTable) FromSchema(schemaName string) *LanguagesTable {
	return newLanguagesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LanguagesTable with assigned table prefix
func (a LanguagesTable) WithPrefix(prefix string) *LanguagesTable {
	return newLanguagesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LanguagesTable with assigned table suffix
func (a LanguagesTable) WithSuffix(suffix string) *LanguagesTable {
	return newLanguagesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLanguagesTable(schemaName, tableName, alias string) *LanguagesTable {
	return &LanguagesTable{
		languagesTable: newLanguagesTableImpl(schemaName, tableName, alias),
		NEW:            newLanguagesTableImpl("", "new", ""),
	}
}

func newLanguagesTableImpl(schemaName, tableName, alias string) languagesTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		NameColumn     = mysql.StringColumn("name")
		CodeColumn     = mysql.StringColumn("code")
		allColumns     = mysql.ColumnList{IDColumn, NameColumn, CodeColumn}
		mutableColumns = mysql.ColumnList{NameColumn, CodeColumn}
	)

	return languagesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Name: NameColumn,
		Code: CodeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
