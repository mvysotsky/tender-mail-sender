//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TendersRequests = newTendersRequestsTable("newtendex", "tenders_requests", "")

type tendersRequestsTable struct {
	mysql.Table

	// Columns
	ID            mysql.ColumnInteger
	TenderID      mysql.ColumnInteger
	DateAdd       mysql.ColumnTimestamp
	AccountID     mysql.ColumnInteger
	Status        mysql.ColumnInteger // 1 - новая, 2 - принята, 3 - отклонена
	InternalCause mysql.ColumnString
	ExternalCause mysql.ColumnString
	Comment       mysql.ColumnString
	UserEdit      mysql.ColumnInteger
	DateEdit      mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TendersRequestsTable struct {
	tendersRequestsTable

	NEW tendersRequestsTable
}

// AS creates new TendersRequestsTable with assigned alias
func (a TendersRequestsTable) AS(alias string) *TendersRequestsTable {
	return newTendersRequestsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TendersRequestsTable with assigned schema name
func (a TendersRequestsTable) FromSchema(schemaName string) *TendersRequestsTable {
	return newTendersRequestsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TendersRequestsTable with assigned table prefix
func (a TendersRequestsTable) WithPrefix(prefix string) *TendersRequestsTable {
	return newTendersRequestsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TendersRequestsTable with assigned table suffix
func (a TendersRequestsTable) WithSuffix(suffix string) *TendersRequestsTable {
	return newTendersRequestsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTendersRequestsTable(schemaName, tableName, alias string) *TendersRequestsTable {
	return &TendersRequestsTable{
		tendersRequestsTable: newTendersRequestsTableImpl(schemaName, tableName, alias),
		NEW:                  newTendersRequestsTableImpl("", "new", ""),
	}
}

func newTendersRequestsTableImpl(schemaName, tableName, alias string) tendersRequestsTable {
	var (
		IDColumn            = mysql.IntegerColumn("id")
		TenderIDColumn      = mysql.IntegerColumn("tender_id")
		DateAddColumn       = mysql.TimestampColumn("date_add")
		AccountIDColumn     = mysql.IntegerColumn("account_id")
		StatusColumn        = mysql.IntegerColumn("status")
		InternalCauseColumn = mysql.StringColumn("internal_cause")
		ExternalCauseColumn = mysql.StringColumn("external_cause")
		CommentColumn       = mysql.StringColumn("comment")
		UserEditColumn      = mysql.IntegerColumn("user_edit")
		DateEditColumn      = mysql.TimestampColumn("date_edit")
		allColumns          = mysql.ColumnList{IDColumn, TenderIDColumn, DateAddColumn, AccountIDColumn, StatusColumn, InternalCauseColumn, ExternalCauseColumn, CommentColumn, UserEditColumn, DateEditColumn}
		mutableColumns      = mysql.ColumnList{TenderIDColumn, DateAddColumn, AccountIDColumn, StatusColumn, InternalCauseColumn, ExternalCauseColumn, CommentColumn, UserEditColumn, DateEditColumn}
	)

	return tendersRequestsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		TenderID:      TenderIDColumn,
		DateAdd:       DateAddColumn,
		AccountID:     AccountIDColumn,
		Status:        StatusColumn,
		InternalCause: InternalCauseColumn,
		ExternalCause: ExternalCauseColumn,
		Comment:       CommentColumn,
		UserEdit:      UserEditColumn,
		DateEdit:      DateEditColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
