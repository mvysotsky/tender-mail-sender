//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ComplaintsAndSuggestions = newComplaintsAndSuggestionsTable("newtendex", "complaints_and_suggestions", "")

type complaintsAndSuggestionsTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	TenderID    mysql.ColumnInteger
	UserID      mysql.ColumnInteger
	AccountName mysql.ColumnString
	Subject     mysql.ColumnString
	Email       mysql.ColumnString
	Message     mysql.ColumnString
	DateAdd     mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ComplaintsAndSuggestionsTable struct {
	complaintsAndSuggestionsTable

	NEW complaintsAndSuggestionsTable
}

// AS creates new ComplaintsAndSuggestionsTable with assigned alias
func (a ComplaintsAndSuggestionsTable) AS(alias string) *ComplaintsAndSuggestionsTable {
	return newComplaintsAndSuggestionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ComplaintsAndSuggestionsTable with assigned schema name
func (a ComplaintsAndSuggestionsTable) FromSchema(schemaName string) *ComplaintsAndSuggestionsTable {
	return newComplaintsAndSuggestionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ComplaintsAndSuggestionsTable with assigned table prefix
func (a ComplaintsAndSuggestionsTable) WithPrefix(prefix string) *ComplaintsAndSuggestionsTable {
	return newComplaintsAndSuggestionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ComplaintsAndSuggestionsTable with assigned table suffix
func (a ComplaintsAndSuggestionsTable) WithSuffix(suffix string) *ComplaintsAndSuggestionsTable {
	return newComplaintsAndSuggestionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newComplaintsAndSuggestionsTable(schemaName, tableName, alias string) *ComplaintsAndSuggestionsTable {
	return &ComplaintsAndSuggestionsTable{
		complaintsAndSuggestionsTable: newComplaintsAndSuggestionsTableImpl(schemaName, tableName, alias),
		NEW:                           newComplaintsAndSuggestionsTableImpl("", "new", ""),
	}
}

func newComplaintsAndSuggestionsTableImpl(schemaName, tableName, alias string) complaintsAndSuggestionsTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		TenderIDColumn    = mysql.IntegerColumn("tender_id")
		UserIDColumn      = mysql.IntegerColumn("user_id")
		AccountNameColumn = mysql.StringColumn("account_name")
		SubjectColumn     = mysql.StringColumn("subject")
		EmailColumn       = mysql.StringColumn("email")
		MessageColumn     = mysql.StringColumn("message")
		DateAddColumn     = mysql.TimestampColumn("date_add")
		allColumns        = mysql.ColumnList{IDColumn, TenderIDColumn, UserIDColumn, AccountNameColumn, SubjectColumn, EmailColumn, MessageColumn, DateAddColumn}
		mutableColumns    = mysql.ColumnList{TenderIDColumn, UserIDColumn, AccountNameColumn, SubjectColumn, EmailColumn, MessageColumn, DateAddColumn}
	)

	return complaintsAndSuggestionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		TenderID:    TenderIDColumn,
		UserID:      UserIDColumn,
		AccountName: AccountNameColumn,
		Subject:     SubjectColumn,
		Email:       EmailColumn,
		Message:     MessageColumn,
		DateAdd:     DateAddColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
