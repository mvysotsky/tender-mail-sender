//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TendersDocumentsTypes = newTendersDocumentsTypesTable("newtendex", "tenders_documents_types", "")

type tendersDocumentsTypesTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnInteger
	TenderID       mysql.ColumnInteger
	DocumentTypeID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TendersDocumentsTypesTable struct {
	tendersDocumentsTypesTable

	NEW tendersDocumentsTypesTable
}

// AS creates new TendersDocumentsTypesTable with assigned alias
func (a TendersDocumentsTypesTable) AS(alias string) *TendersDocumentsTypesTable {
	return newTendersDocumentsTypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TendersDocumentsTypesTable with assigned schema name
func (a TendersDocumentsTypesTable) FromSchema(schemaName string) *TendersDocumentsTypesTable {
	return newTendersDocumentsTypesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TendersDocumentsTypesTable with assigned table prefix
func (a TendersDocumentsTypesTable) WithPrefix(prefix string) *TendersDocumentsTypesTable {
	return newTendersDocumentsTypesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TendersDocumentsTypesTable with assigned table suffix
func (a TendersDocumentsTypesTable) WithSuffix(suffix string) *TendersDocumentsTypesTable {
	return newTendersDocumentsTypesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTendersDocumentsTypesTable(schemaName, tableName, alias string) *TendersDocumentsTypesTable {
	return &TendersDocumentsTypesTable{
		tendersDocumentsTypesTable: newTendersDocumentsTypesTableImpl(schemaName, tableName, alias),
		NEW:                        newTendersDocumentsTypesTableImpl("", "new", ""),
	}
}

func newTendersDocumentsTypesTableImpl(schemaName, tableName, alias string) tendersDocumentsTypesTable {
	var (
		IDColumn             = mysql.IntegerColumn("id")
		TenderIDColumn       = mysql.IntegerColumn("tender_id")
		DocumentTypeIDColumn = mysql.IntegerColumn("document_type_id")
		allColumns           = mysql.ColumnList{IDColumn, TenderIDColumn, DocumentTypeIDColumn}
		mutableColumns       = mysql.ColumnList{TenderIDColumn, DocumentTypeIDColumn}
	)

	return tendersDocumentsTypesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		TenderID:       TenderIDColumn,
		DocumentTypeID: DocumentTypeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
