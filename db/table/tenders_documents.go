//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TendersDocuments = newTendersDocumentsTable("newtendex", "tenders_documents", "")

type tendersDocumentsTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	TenderID   mysql.ColumnInteger
	DocumentID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TendersDocumentsTable struct {
	tendersDocumentsTable

	NEW tendersDocumentsTable
}

// AS creates new TendersDocumentsTable with assigned alias
func (a TendersDocumentsTable) AS(alias string) *TendersDocumentsTable {
	return newTendersDocumentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TendersDocumentsTable with assigned schema name
func (a TendersDocumentsTable) FromSchema(schemaName string) *TendersDocumentsTable {
	return newTendersDocumentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TendersDocumentsTable with assigned table prefix
func (a TendersDocumentsTable) WithPrefix(prefix string) *TendersDocumentsTable {
	return newTendersDocumentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TendersDocumentsTable with assigned table suffix
func (a TendersDocumentsTable) WithSuffix(suffix string) *TendersDocumentsTable {
	return newTendersDocumentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTendersDocumentsTable(schemaName, tableName, alias string) *TendersDocumentsTable {
	return &TendersDocumentsTable{
		tendersDocumentsTable: newTendersDocumentsTableImpl(schemaName, tableName, alias),
		NEW:                   newTendersDocumentsTableImpl("", "new", ""),
	}
}

func newTendersDocumentsTableImpl(schemaName, tableName, alias string) tendersDocumentsTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		TenderIDColumn   = mysql.IntegerColumn("tender_id")
		DocumentIDColumn = mysql.IntegerColumn("document_id")
		allColumns       = mysql.ColumnList{IDColumn, TenderIDColumn, DocumentIDColumn}
		mutableColumns   = mysql.ColumnList{TenderIDColumn, DocumentIDColumn}
	)

	return tendersDocumentsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		TenderID:   TenderIDColumn,
		DocumentID: DocumentIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
