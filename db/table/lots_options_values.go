//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var LotsOptionsValues = newLotsOptionsValuesTable("newtendex", "lots_options_values", "")

type lotsOptionsValuesTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	LotOptionID mysql.ColumnInteger
	Value       mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type LotsOptionsValuesTable struct {
	lotsOptionsValuesTable

	NEW lotsOptionsValuesTable
}

// AS creates new LotsOptionsValuesTable with assigned alias
func (a LotsOptionsValuesTable) AS(alias string) *LotsOptionsValuesTable {
	return newLotsOptionsValuesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LotsOptionsValuesTable with assigned schema name
func (a LotsOptionsValuesTable) FromSchema(schemaName string) *LotsOptionsValuesTable {
	return newLotsOptionsValuesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LotsOptionsValuesTable with assigned table prefix
func (a LotsOptionsValuesTable) WithPrefix(prefix string) *LotsOptionsValuesTable {
	return newLotsOptionsValuesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LotsOptionsValuesTable with assigned table suffix
func (a LotsOptionsValuesTable) WithSuffix(suffix string) *LotsOptionsValuesTable {
	return newLotsOptionsValuesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLotsOptionsValuesTable(schemaName, tableName, alias string) *LotsOptionsValuesTable {
	return &LotsOptionsValuesTable{
		lotsOptionsValuesTable: newLotsOptionsValuesTableImpl(schemaName, tableName, alias),
		NEW:                    newLotsOptionsValuesTableImpl("", "new", ""),
	}
}

func newLotsOptionsValuesTableImpl(schemaName, tableName, alias string) lotsOptionsValuesTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		LotOptionIDColumn = mysql.IntegerColumn("lot_option_id")
		ValueColumn       = mysql.StringColumn("value")
		allColumns        = mysql.ColumnList{IDColumn, LotOptionIDColumn, ValueColumn}
		mutableColumns    = mysql.ColumnList{LotOptionIDColumn, ValueColumn}
	)

	return lotsOptionsValuesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		LotOptionID: LotOptionIDColumn,
		Value:       ValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
