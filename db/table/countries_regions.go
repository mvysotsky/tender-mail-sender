//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CountriesRegions = newCountriesRegionsTable("newtendex", "countries_regions", "")

type countriesRegionsTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	CountryID mysql.ColumnInteger
	Name      mysql.ColumnString
	UserAdd   mysql.ColumnInteger
	UserEdit  mysql.ColumnInteger
	DateAdd   mysql.ColumnTimestamp
	DateEdit  mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type CountriesRegionsTable struct {
	countriesRegionsTable

	NEW countriesRegionsTable
}

// AS creates new CountriesRegionsTable with assigned alias
func (a CountriesRegionsTable) AS(alias string) *CountriesRegionsTable {
	return newCountriesRegionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CountriesRegionsTable with assigned schema name
func (a CountriesRegionsTable) FromSchema(schemaName string) *CountriesRegionsTable {
	return newCountriesRegionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CountriesRegionsTable with assigned table prefix
func (a CountriesRegionsTable) WithPrefix(prefix string) *CountriesRegionsTable {
	return newCountriesRegionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CountriesRegionsTable with assigned table suffix
func (a CountriesRegionsTable) WithSuffix(suffix string) *CountriesRegionsTable {
	return newCountriesRegionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCountriesRegionsTable(schemaName, tableName, alias string) *CountriesRegionsTable {
	return &CountriesRegionsTable{
		countriesRegionsTable: newCountriesRegionsTableImpl(schemaName, tableName, alias),
		NEW:                   newCountriesRegionsTableImpl("", "new", ""),
	}
}

func newCountriesRegionsTableImpl(schemaName, tableName, alias string) countriesRegionsTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		CountryIDColumn = mysql.IntegerColumn("country_id")
		NameColumn      = mysql.StringColumn("name")
		UserAddColumn   = mysql.IntegerColumn("user_add")
		UserEditColumn  = mysql.IntegerColumn("user_edit")
		DateAddColumn   = mysql.TimestampColumn("date_add")
		DateEditColumn  = mysql.TimestampColumn("date_edit")
		allColumns      = mysql.ColumnList{IDColumn, CountryIDColumn, NameColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
		mutableColumns  = mysql.ColumnList{CountryIDColumn, NameColumn, UserAddColumn, UserEditColumn, DateAddColumn, DateEditColumn}
	)

	return countriesRegionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CountryID: CountryIDColumn,
		Name:      NameColumn,
		UserAdd:   UserAddColumn,
		UserEdit:  UserEditColumn,
		DateAdd:   DateAddColumn,
		DateEdit:  DateEditColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
