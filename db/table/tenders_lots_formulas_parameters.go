//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TendersLotsFormulasParameters = newTendersLotsFormulasParametersTable("newtendex", "tenders_lots_formulas_parameters", "")

type tendersLotsFormulasParametersTable struct {
	mysql.Table

	// Columns
	ID                 mysql.ColumnInteger
	TenderLotID        mysql.ColumnInteger
	FormulaParameterID mysql.ColumnInteger
	MinValue           mysql.ColumnFloat
	MaxValue           mysql.ColumnFloat

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TendersLotsFormulasParametersTable struct {
	tendersLotsFormulasParametersTable

	NEW tendersLotsFormulasParametersTable
}

// AS creates new TendersLotsFormulasParametersTable with assigned alias
func (a TendersLotsFormulasParametersTable) AS(alias string) *TendersLotsFormulasParametersTable {
	return newTendersLotsFormulasParametersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TendersLotsFormulasParametersTable with assigned schema name
func (a TendersLotsFormulasParametersTable) FromSchema(schemaName string) *TendersLotsFormulasParametersTable {
	return newTendersLotsFormulasParametersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TendersLotsFormulasParametersTable with assigned table prefix
func (a TendersLotsFormulasParametersTable) WithPrefix(prefix string) *TendersLotsFormulasParametersTable {
	return newTendersLotsFormulasParametersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TendersLotsFormulasParametersTable with assigned table suffix
func (a TendersLotsFormulasParametersTable) WithSuffix(suffix string) *TendersLotsFormulasParametersTable {
	return newTendersLotsFormulasParametersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTendersLotsFormulasParametersTable(schemaName, tableName, alias string) *TendersLotsFormulasParametersTable {
	return &TendersLotsFormulasParametersTable{
		tendersLotsFormulasParametersTable: newTendersLotsFormulasParametersTableImpl(schemaName, tableName, alias),
		NEW:                                newTendersLotsFormulasParametersTableImpl("", "new", ""),
	}
}

func newTendersLotsFormulasParametersTableImpl(schemaName, tableName, alias string) tendersLotsFormulasParametersTable {
	var (
		IDColumn                 = mysql.IntegerColumn("id")
		TenderLotIDColumn        = mysql.IntegerColumn("tender_lot_id")
		FormulaParameterIDColumn = mysql.IntegerColumn("formula_parameter_id")
		MinValueColumn           = mysql.FloatColumn("min_value")
		MaxValueColumn           = mysql.FloatColumn("max_value")
		allColumns               = mysql.ColumnList{IDColumn, TenderLotIDColumn, FormulaParameterIDColumn, MinValueColumn, MaxValueColumn}
		mutableColumns           = mysql.ColumnList{TenderLotIDColumn, FormulaParameterIDColumn, MinValueColumn, MaxValueColumn}
	)

	return tendersLotsFormulasParametersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		TenderLotID:        TenderLotIDColumn,
		FormulaParameterID: FormulaParameterIDColumn,
		MinValue:           MinValueColumn,
		MaxValue:           MaxValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
